
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "nonassocIFXnonassocELSEnonassocASSIGNADDASSIGNSUBASSIGNMULASSIGNDIVASSIGNnonassocEQGTLTGELENEleftADDSUBDOTADDDOTSUBleftMULDIVDOTMULDOTDIVrightNEGATIONleftTRANSPOSEADD ADDASSIGN ASSIGN BREAK CONTINUE DIV DIVASSIGN DOTADD DOTDIV DOTMUL DOTSUB ELSE EQ EYE FLOATNUM FOR GE GT ID IF INTNUM LE LT MUL MULASSIGN NE ONES PRINT RETURN STRING SUB SUBASSIGN TRANSPOSE WHILE ZEROSprogram : instructions_optinstructions_opt : instructionsinstructions_opt : instructions : instructions instructioninstructions : instructioninstruction : statement ';' instruction : IF '(' condition ')' instruction ELSE instruction\n                   | IF '(' condition ')' instruction %prec IFXinstruction : FOR variable ASSIGN expression ':' expression instructioninstruction : WHILE '(' condition ')' instructioninstruction : '{' instructions '}' statement : PRINT expressionstatement : PRINT multiple_expressionsstatement : RETURN expression\n                 | RETURNstatement : CONTINUEstatement : BREAKstatement : assignable ASSIGN expression\n                 | assignable ADDASSIGN expression\n                 | assignable SUBASSIGN expression\n                 | assignable MULASSIGN expression\n                 | assignable DIVASSIGN expressioncondition : expression EQ expression\n                 | expression GT expression\n                 | expression LT expression\n                 | expression GE expression\n                 | expression LE expression\n                 | expression NE expressionexpression : expression ADD expression\n                  | expression SUB expression\n                  | expression MUL expression\n                  | expression DIV expressionexpression : expression DOTADD expression\n                  | expression DOTSUB expression\n                  | expression DOTMUL expression\n                  | expression DOTDIV expressionexpression : SUB expression %prec NEGATIONexpression : expression TRANSPOSE expression : INTNUMexpression : FLOATNUMexpression : assignableassignable : variable\n                  | referencereference : variable '[' expression ']' reference : variable '[' multiple_expressions ']' variable : IDexpression : STRINGexpression : '(' expression ')' expression : vectorexpression : matrixmatrix : ONES '(' expression ')'\n              | ONES '(' expression ',' expression ')' matrix : ZEROS '(' expression ')'\n              | ZEROS '(' expression ',' expression ')' matrix : EYE '(' expression ')'\n              | EYE '(' expression ',' expression ')' vector : '[' expression ']' vector : '[' multiple_expressions ']' multiple_expressions : expression ',' expressionmultiple_expressions : multiple_expressions ',' expression"
    
_lr_action_items = {'$end':([0,1,2,3,4,18,19,51,102,110,122,123,],[-3,0,-1,-2,-5,-4,-6,-11,-8,-10,-7,-9,]),'IF':([0,3,4,8,10,16,17,18,19,24,28,29,30,31,33,34,51,60,63,75,83,84,85,86,87,88,89,90,91,92,93,96,97,98,102,110,111,113,115,117,118,122,123,124,125,126,],[6,6,-5,-42,6,-43,-46,-4,-6,6,-39,-40,-41,-47,-49,-50,-11,-38,-37,6,-44,-45,6,-29,-30,-31,-32,-33,-34,-35,-36,-48,-57,-58,-8,-10,-51,-53,-55,6,6,-7,-9,-52,-54,-56,]),'FOR':([0,3,4,8,10,16,17,18,19,24,28,29,30,31,33,34,51,60,63,75,83,84,85,86,87,88,89,90,91,92,93,96,97,98,102,110,111,113,115,117,118,122,123,124,125,126,],[7,7,-5,-42,7,-43,-46,-4,-6,7,-39,-40,-41,-47,-49,-50,-11,-38,-37,7,-44,-45,7,-29,-30,-31,-32,-33,-34,-35,-36,-48,-57,-58,-8,-10,-51,-53,-55,7,7,-7,-9,-52,-54,-56,]),'WHILE':([0,3,4,8,10,16,17,18,19,24,28,29,30,31,33,34,51,60,63,75,83,84,85,86,87,88,89,90,91,92,93,96,97,98,102,110,111,113,115,117,118,122,123,124,125,126,],[9,9,-5,-42,9,-43,-46,-4,-6,9,-39,-40,-41,-47,-49,-50,-11,-38,-37,9,-44,-45,9,-29,-30,-31,-32,-33,-34,-35,-36,-48,-57,-58,-8,-10,-51,-53,-55,9,9,-7,-9,-52,-54,-56,]),'{':([0,3,4,8,10,16,17,18,19,24,28,29,30,31,33,34,51,60,63,75,83,84,85,86,87,88,89,90,91,92,93,96,97,98,102,110,111,113,115,117,118,122,123,124,125,126,],[10,10,-5,-42,10,-43,-46,-4,-6,10,-39,-40,-41,-47,-49,-50,-11,-38,-37,10,-44,-45,10,-29,-30,-31,-32,-33,-34,-35,-36,-48,-57,-58,-8,-10,-51,-53,-55,10,10,-7,-9,-52,-54,-56,]),'PRINT':([0,3,4,8,10,16,17,18,19,24,28,29,30,31,33,34,51,60,63,75,83,84,85,86,87,88,89,90,91,92,93,96,97,98,102,110,111,113,115,117,118,122,123,124,125,126,],[11,11,-5,-42,11,-43,-46,-4,-6,11,-39,-40,-41,-47,-49,-50,-11,-38,-37,11,-44,-45,11,-29,-30,-31,-32,-33,-34,-35,-36,-48,-57,-58,-8,-10,-51,-53,-55,11,11,-7,-9,-52,-54,-56,]),'RETURN':([0,3,4,8,10,16,17,18,19,24,28,29,30,31,33,34,51,60,63,75,83,84,85,86,87,88,89,90,91,92,93,96,97,98,102,110,111,113,115,117,118,122,123,124,125,126,],[12,12,-5,-42,12,-43,-46,-4,-6,12,-39,-40,-41,-47,-49,-50,-11,-38,-37,12,-44,-45,12,-29,-30,-31,-32,-33,-34,-35,-36,-48,-57,-58,-8,-10,-51,-53,-55,12,12,-7,-9,-52,-54,-56,]),'CONTINUE':([0,3,4,8,10,16,17,18,19,24,28,29,30,31,33,34,51,60,63,75,83,84,85,86,87,88,89,90,91,92,93,96,97,98,102,110,111,113,115,117,118,122,123,124,125,126,],[13,13,-5,-42,13,-43,-46,-4,-6,13,-39,-40,-41,-47,-49,-50,-11,-38,-37,13,-44,-45,13,-29,-30,-31,-32,-33,-34,-35,-36,-48,-57,-58,-8,-10,-51,-53,-55,13,13,-7,-9,-52,-54,-56,]),'BREAK':([0,3,4,8,10,16,17,18,19,24,28,29,30,31,33,34,51,60,63,75,83,84,85,86,87,88,89,90,91,92,93,96,97,98,102,110,111,113,115,117,118,122,123,124,125,126,],[14,14,-5,-42,14,-43,-46,-4,-6,14,-39,-40,-41,-47,-49,-50,-11,-38,-37,14,-44,-45,14,-29,-30,-31,-32,-33,-34,-35,-36,-48,-57,-58,-8,-10,-51,-53,-55,14,14,-7,-9,-52,-54,-56,]),'ID':([0,3,4,7,8,10,11,12,16,17,18,19,20,22,23,24,27,28,29,30,31,32,33,34,35,40,41,42,43,44,47,51,52,53,54,55,56,57,58,59,60,61,62,63,67,68,69,75,76,77,78,79,80,81,83,84,85,86,87,88,89,90,91,92,93,96,97,98,102,109,110,111,112,113,114,115,116,117,118,122,123,124,125,126,],[17,17,-5,17,-42,17,17,17,-43,-46,-4,-6,17,17,17,17,17,-39,-40,-41,-47,17,-49,-50,17,17,17,17,17,17,17,-11,17,17,17,17,17,17,17,17,-38,17,17,-37,17,17,17,17,17,17,17,17,17,17,-44,-45,17,-29,-30,-31,-32,-33,-34,-35,-36,-48,-57,-58,-8,17,-10,-51,17,-53,17,-55,17,17,17,-7,-9,-52,-54,-56,]),'}':([4,18,19,24,51,102,110,122,123,],[-5,-4,-6,51,-11,-8,-10,-7,-9,]),';':([5,8,12,13,14,16,17,25,26,28,29,30,31,33,34,39,60,63,70,71,72,73,74,83,84,86,87,88,89,90,91,92,93,94,95,96,97,98,111,113,115,124,125,126,],[19,-42,-15,-16,-17,-43,-46,-12,-13,-39,-40,-41,-47,-49,-50,-14,-38,-37,-18,-19,-20,-21,-22,-44,-45,-29,-30,-31,-32,-33,-34,-35,-36,-59,-60,-48,-57,-58,-51,-53,-55,-52,-54,-56,]),'(':([6,9,11,12,20,22,23,27,32,35,36,37,38,40,41,42,43,44,47,52,53,54,55,56,57,58,59,61,62,67,68,69,76,77,78,79,80,81,109,112,114,116,],[20,23,32,32,32,32,32,32,32,32,67,68,69,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'ASSIGN':([8,15,16,17,21,83,84,],[-42,40,-43,-46,47,-44,-45,]),'ADDASSIGN':([8,15,16,17,83,84,],[-42,41,-43,-46,-44,-45,]),'SUBASSIGN':([8,15,16,17,83,84,],[-42,42,-43,-46,-44,-45,]),'MULASSIGN':([8,15,16,17,83,84,],[-42,43,-43,-46,-44,-45,]),'DIVASSIGN':([8,15,16,17,83,84,],[-42,44,-43,-46,-44,-45,]),'ADD':([8,16,17,25,28,29,30,31,33,34,39,46,48,60,63,64,65,70,71,72,73,74,82,83,84,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,104,105,106,107,108,111,113,115,118,119,120,121,124,125,126,],[-42,-43,-46,52,-39,-40,-41,-47,-49,-50,52,52,52,-38,-37,52,52,52,52,52,52,52,52,-44,-45,-29,-30,-31,-32,-33,-34,-35,-36,52,52,-48,-57,-58,52,52,52,52,52,52,52,52,52,-51,-53,-55,52,52,52,52,-52,-54,-56,]),'SUB':([8,11,12,16,17,20,22,23,25,27,28,29,30,31,32,33,34,35,39,40,41,42,43,44,46,47,48,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,69,70,71,72,73,74,76,77,78,79,80,81,82,83,84,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,104,105,106,107,108,109,111,112,113,114,115,116,118,119,120,121,124,125,126,],[-42,27,27,-43,-46,27,27,27,53,27,-39,-40,-41,-47,27,-49,-50,27,53,27,27,27,27,27,53,27,53,27,27,27,27,27,27,27,27,-38,27,27,-37,53,53,27,27,27,53,53,53,53,53,27,27,27,27,27,27,53,-44,-45,-29,-30,-31,-32,-33,-34,-35,-36,53,53,-48,-57,-58,53,53,53,53,53,53,53,53,53,27,-51,27,-53,27,-55,27,53,53,53,53,-52,-54,-56,]),'MUL':([8,16,17,25,28,29,30,31,33,34,39,46,48,60,63,64,65,70,71,72,73,74,82,83,84,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,104,105,106,107,108,111,113,115,118,119,120,121,124,125,126,],[-42,-43,-46,54,-39,-40,-41,-47,-49,-50,54,54,54,-38,-37,54,54,54,54,54,54,54,54,-44,-45,54,54,-31,-32,54,54,-35,-36,54,54,-48,-57,-58,54,54,54,54,54,54,54,54,54,-51,-53,-55,54,54,54,54,-52,-54,-56,]),'DIV':([8,16,17,25,28,29,30,31,33,34,39,46,48,60,63,64,65,70,71,72,73,74,82,83,84,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,104,105,106,107,108,111,113,115,118,119,120,121,124,125,126,],[-42,-43,-46,55,-39,-40,-41,-47,-49,-50,55,55,55,-38,-37,55,55,55,55,55,55,55,55,-44,-45,55,55,-31,-32,55,55,-35,-36,55,55,-48,-57,-58,55,55,55,55,55,55,55,55,55,-51,-53,-55,55,55,55,55,-52,-54,-56,]),'DOTADD':([8,16,17,25,28,29,30,31,33,34,39,46,48,60,63,64,65,70,71,72,73,74,82,83,84,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,104,105,106,107,108,111,113,115,118,119,120,121,124,125,126,],[-42,-43,-46,56,-39,-40,-41,-47,-49,-50,56,56,56,-38,-37,56,56,56,56,56,56,56,56,-44,-45,-29,-30,-31,-32,-33,-34,-35,-36,56,56,-48,-57,-58,56,56,56,56,56,56,56,56,56,-51,-53,-55,56,56,56,56,-52,-54,-56,]),'DOTSUB':([8,16,17,25,28,29,30,31,33,34,39,46,48,60,63,64,65,70,71,72,73,74,82,83,84,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,104,105,106,107,108,111,113,115,118,119,120,121,124,125,126,],[-42,-43,-46,57,-39,-40,-41,-47,-49,-50,57,57,57,-38,-37,57,57,57,57,57,57,57,57,-44,-45,-29,-30,-31,-32,-33,-34,-35,-36,57,57,-48,-57,-58,57,57,57,57,57,57,57,57,57,-51,-53,-55,57,57,57,57,-52,-54,-56,]),'DOTMUL':([8,16,17,25,28,29,30,31,33,34,39,46,48,60,63,64,65,70,71,72,73,74,82,83,84,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,104,105,106,107,108,111,113,115,118,119,120,121,124,125,126,],[-42,-43,-46,58,-39,-40,-41,-47,-49,-50,58,58,58,-38,-37,58,58,58,58,58,58,58,58,-44,-45,58,58,-31,-32,58,58,-35,-36,58,58,-48,-57,-58,58,58,58,58,58,58,58,58,58,-51,-53,-55,58,58,58,58,-52,-54,-56,]),'DOTDIV':([8,16,17,25,28,29,30,31,33,34,39,46,48,60,63,64,65,70,71,72,73,74,82,83,84,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,104,105,106,107,108,111,113,115,118,119,120,121,124,125,126,],[-42,-43,-46,59,-39,-40,-41,-47,-49,-50,59,59,59,-38,-37,59,59,59,59,59,59,59,59,-44,-45,59,59,-31,-32,59,59,-35,-36,59,59,-48,-57,-58,59,59,59,59,59,59,59,59,59,-51,-53,-55,59,59,59,59,-52,-54,-56,]),'TRANSPOSE':([8,16,17,25,28,29,30,31,33,34,39,46,48,60,63,64,65,70,71,72,73,74,82,83,84,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,104,105,106,107,108,111,113,115,118,119,120,121,124,125,126,],[-42,-43,-46,60,-39,-40,-41,-47,-49,-50,60,60,60,-38,60,60,60,60,60,60,60,60,60,-44,-45,60,60,60,60,60,60,60,60,60,60,-48,-57,-58,60,60,60,60,60,60,60,60,60,-51,-53,-55,60,60,60,60,-52,-54,-56,]),',':([8,16,17,25,26,28,29,30,31,33,34,48,49,60,63,65,66,83,84,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,111,113,115,124,125,126,],[-42,-43,-46,61,62,-39,-40,-41,-47,-49,-50,61,62,-38,-37,61,62,-44,-45,-29,-30,-31,-32,-33,-34,-35,-36,-59,-60,-48,-57,-58,112,114,116,-51,-53,-55,-52,-54,-56,]),'EQ':([8,16,17,28,29,30,31,33,34,46,60,63,83,84,86,87,88,89,90,91,92,93,96,97,98,111,113,115,124,125,126,],[-42,-43,-46,-39,-40,-41,-47,-49,-50,76,-38,-37,-44,-45,-29,-30,-31,-32,-33,-34,-35,-36,-48,-57,-58,-51,-53,-55,-52,-54,-56,]),'GT':([8,16,17,28,29,30,31,33,34,46,60,63,83,84,86,87,88,89,90,91,92,93,96,97,98,111,113,115,124,125,126,],[-42,-43,-46,-39,-40,-41,-47,-49,-50,77,-38,-37,-44,-45,-29,-30,-31,-32,-33,-34,-35,-36,-48,-57,-58,-51,-53,-55,-52,-54,-56,]),'LT':([8,16,17,28,29,30,31,33,34,46,60,63,83,84,86,87,88,89,90,91,92,93,96,97,98,111,113,115,124,125,126,],[-42,-43,-46,-39,-40,-41,-47,-49,-50,78,-38,-37,-44,-45,-29,-30,-31,-32,-33,-34,-35,-36,-48,-57,-58,-51,-53,-55,-52,-54,-56,]),'GE':([8,16,17,28,29,30,31,33,34,46,60,63,83,84,86,87,88,89,90,91,92,93,96,97,98,111,113,115,124,125,126,],[-42,-43,-46,-39,-40,-41,-47,-49,-50,79,-38,-37,-44,-45,-29,-30,-31,-32,-33,-34,-35,-36,-48,-57,-58,-51,-53,-55,-52,-54,-56,]),'LE':([8,16,17,28,29,30,31,33,34,46,60,63,83,84,86,87,88,89,90,91,92,93,96,97,98,111,113,115,124,125,126,],[-42,-43,-46,-39,-40,-41,-47,-49,-50,80,-38,-37,-44,-45,-29,-30,-31,-32,-33,-34,-35,-36,-48,-57,-58,-51,-53,-55,-52,-54,-56,]),'NE':([8,16,17,28,29,30,31,33,34,46,60,63,83,84,86,87,88,89,90,91,92,93,96,97,98,111,113,115,124,125,126,],[-42,-43,-46,-39,-40,-41,-47,-49,-50,81,-38,-37,-44,-45,-29,-30,-31,-32,-33,-34,-35,-36,-48,-57,-58,-51,-53,-55,-52,-54,-56,]),']':([8,16,17,28,29,30,31,33,34,48,49,60,63,65,66,83,84,86,87,88,89,90,91,92,93,94,95,96,97,98,111,113,115,124,125,126,],[-42,-43,-46,-39,-40,-41,-47,-49,-50,83,84,-38,-37,97,98,-44,-45,-29,-30,-31,-32,-33,-34,-35,-36,-59,-60,-48,-57,-58,-51,-53,-55,-52,-54,-56,]),')':([8,16,17,28,29,30,31,33,34,45,50,60,63,64,83,84,86,87,88,89,90,91,92,93,96,97,98,99,100,101,103,104,105,106,107,108,111,113,115,119,120,121,124,125,126,],[-42,-43,-46,-39,-40,-41,-47,-49,-50,75,85,-38,-37,96,-44,-45,-29,-30,-31,-32,-33,-34,-35,-36,-48,-57,-58,111,113,115,-23,-24,-25,-26,-27,-28,-51,-53,-55,124,125,126,-52,-54,-56,]),':':([8,16,17,28,29,30,31,33,34,60,63,82,83,84,86,87,88,89,90,91,92,93,96,97,98,111,113,115,124,125,126,],[-42,-43,-46,-39,-40,-41,-47,-49,-50,-38,-37,109,-44,-45,-29,-30,-31,-32,-33,-34,-35,-36,-48,-57,-58,-51,-53,-55,-52,-54,-56,]),'[':([8,11,12,17,20,22,23,27,32,35,40,41,42,43,44,47,52,53,54,55,56,57,58,59,61,62,67,68,69,76,77,78,79,80,81,109,112,114,116,],[22,35,35,-46,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'INTNUM':([11,12,20,22,23,27,32,35,40,41,42,43,44,47,52,53,54,55,56,57,58,59,61,62,67,68,69,76,77,78,79,80,81,109,112,114,116,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'FLOATNUM':([11,12,20,22,23,27,32,35,40,41,42,43,44,47,52,53,54,55,56,57,58,59,61,62,67,68,69,76,77,78,79,80,81,109,112,114,116,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'STRING':([11,12,20,22,23,27,32,35,40,41,42,43,44,47,52,53,54,55,56,57,58,59,61,62,67,68,69,76,77,78,79,80,81,109,112,114,116,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'ONES':([11,12,20,22,23,27,32,35,40,41,42,43,44,47,52,53,54,55,56,57,58,59,61,62,67,68,69,76,77,78,79,80,81,109,112,114,116,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'ZEROS':([11,12,20,22,23,27,32,35,40,41,42,43,44,47,52,53,54,55,56,57,58,59,61,62,67,68,69,76,77,78,79,80,81,109,112,114,116,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'EYE':([11,12,20,22,23,27,32,35,40,41,42,43,44,47,52,53,54,55,56,57,58,59,61,62,67,68,69,76,77,78,79,80,81,109,112,114,116,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'ELSE':([19,51,102,110,122,123,],[-6,-11,117,-10,-7,-9,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'instructions_opt':([0,],[2,]),'instructions':([0,10,],[3,24,]),'instruction':([0,3,10,24,75,85,117,118,],[4,18,4,18,102,110,122,123,]),'statement':([0,3,10,24,75,85,117,118,],[5,5,5,5,5,5,5,5,]),'variable':([0,3,7,10,11,12,20,22,23,24,27,32,35,40,41,42,43,44,47,52,53,54,55,56,57,58,59,61,62,67,68,69,75,76,77,78,79,80,81,85,109,112,114,116,117,118,],[8,8,21,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'assignable':([0,3,10,11,12,20,22,23,24,27,32,35,40,41,42,43,44,47,52,53,54,55,56,57,58,59,61,62,67,68,69,75,76,77,78,79,80,81,85,109,112,114,116,117,118,],[15,15,15,30,30,30,30,30,15,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,15,30,30,30,30,30,30,15,30,30,30,30,15,15,]),'reference':([0,3,10,11,12,20,22,23,24,27,32,35,40,41,42,43,44,47,52,53,54,55,56,57,58,59,61,62,67,68,69,75,76,77,78,79,80,81,85,109,112,114,116,117,118,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'expression':([11,12,20,22,23,27,32,35,40,41,42,43,44,47,52,53,54,55,56,57,58,59,61,62,67,68,69,76,77,78,79,80,81,109,112,114,116,],[25,39,46,48,46,63,64,65,70,71,72,73,74,82,86,87,88,89,90,91,92,93,94,95,99,100,101,103,104,105,106,107,108,118,119,120,121,]),'multiple_expressions':([11,22,35,],[26,49,66,]),'vector':([11,12,20,22,23,27,32,35,40,41,42,43,44,47,52,53,54,55,56,57,58,59,61,62,67,68,69,76,77,78,79,80,81,109,112,114,116,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'matrix':([11,12,20,22,23,27,32,35,40,41,42,43,44,47,52,53,54,55,56,57,58,59,61,62,67,68,69,76,77,78,79,80,81,109,112,114,116,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'condition':([20,23,],[45,50,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> instructions_opt','program',1,'p_program','zad2_parser.py',28),
  ('instructions_opt -> instructions','instructions_opt',1,'p_instructions_opt_some','zad2_parser.py',32),
  ('instructions_opt -> <empty>','instructions_opt',0,'p_instructions_opt_none','zad2_parser.py',36),
  ('instructions -> instructions instruction','instructions',2,'p_instructions_multiple','zad2_parser.py',40),
  ('instructions -> instruction','instructions',1,'p_instructions_single','zad2_parser.py',44),
  ('instruction -> statement ;','instruction',2,'p_instruction_statement','zad2_parser.py',48),
  ('instruction -> IF ( condition ) instruction ELSE instruction','instruction',7,'p_instruction_if','zad2_parser.py',52),
  ('instruction -> IF ( condition ) instruction','instruction',5,'p_instruction_if','zad2_parser.py',53),
  ('instruction -> FOR variable ASSIGN expression : expression instruction','instruction',7,'p_instruction_for','zad2_parser.py',60),
  ('instruction -> WHILE ( condition ) instruction','instruction',5,'p_instruction_while','zad2_parser.py',64),
  ('instruction -> { instructions }','instruction',3,'p_instruction_comlex','zad2_parser.py',68),
  ('statement -> PRINT expression','statement',2,'p_statement_print_one','zad2_parser.py',72),
  ('statement -> PRINT multiple_expressions','statement',2,'p_statement_print_more','zad2_parser.py',76),
  ('statement -> RETURN expression','statement',2,'p_statement_return','zad2_parser.py',80),
  ('statement -> RETURN','statement',1,'p_statement_return','zad2_parser.py',81),
  ('statement -> CONTINUE','statement',1,'p_statement_continue','zad2_parser.py',88),
  ('statement -> BREAK','statement',1,'p_statement_break','zad2_parser.py',92),
  ('statement -> assignable ASSIGN expression','statement',3,'p_statement_assign','zad2_parser.py',96),
  ('statement -> assignable ADDASSIGN expression','statement',3,'p_statement_assign','zad2_parser.py',97),
  ('statement -> assignable SUBASSIGN expression','statement',3,'p_statement_assign','zad2_parser.py',98),
  ('statement -> assignable MULASSIGN expression','statement',3,'p_statement_assign','zad2_parser.py',99),
  ('statement -> assignable DIVASSIGN expression','statement',3,'p_statement_assign','zad2_parser.py',100),
  ('condition -> expression EQ expression','condition',3,'p_condtion','zad2_parser.py',104),
  ('condition -> expression GT expression','condition',3,'p_condtion','zad2_parser.py',105),
  ('condition -> expression LT expression','condition',3,'p_condtion','zad2_parser.py',106),
  ('condition -> expression GE expression','condition',3,'p_condtion','zad2_parser.py',107),
  ('condition -> expression LE expression','condition',3,'p_condtion','zad2_parser.py',108),
  ('condition -> expression NE expression','condition',3,'p_condtion','zad2_parser.py',109),
  ('expression -> expression ADD expression','expression',3,'p_expression_binary_simple','zad2_parser.py',113),
  ('expression -> expression SUB expression','expression',3,'p_expression_binary_simple','zad2_parser.py',114),
  ('expression -> expression MUL expression','expression',3,'p_expression_binary_simple','zad2_parser.py',115),
  ('expression -> expression DIV expression','expression',3,'p_expression_binary_simple','zad2_parser.py',116),
  ('expression -> expression DOTADD expression','expression',3,'p_expression_binary_dot','zad2_parser.py',120),
  ('expression -> expression DOTSUB expression','expression',3,'p_expression_binary_dot','zad2_parser.py',121),
  ('expression -> expression DOTMUL expression','expression',3,'p_expression_binary_dot','zad2_parser.py',122),
  ('expression -> expression DOTDIV expression','expression',3,'p_expression_binary_dot','zad2_parser.py',123),
  ('expression -> SUB expression','expression',2,'p_expression_negation','zad2_parser.py',127),
  ('expression -> expression TRANSPOSE','expression',2,'p_expression_transposition','zad2_parser.py',131),
  ('expression -> INTNUM','expression',1,'p_expression_int_numver','zad2_parser.py',135),
  ('expression -> FLOATNUM','expression',1,'p_expression_float_numver','zad2_parser.py',139),
  ('expression -> assignable','expression',1,'p_expression_assignable','zad2_parser.py',143),
  ('assignable -> variable','assignable',1,'p_assiganble','zad2_parser.py',147),
  ('assignable -> reference','assignable',1,'p_assiganble','zad2_parser.py',148),
  ('reference -> variable [ expression ]','reference',4,'p_reference_one','zad2_parser.py',152),
  ('reference -> variable [ multiple_expressions ]','reference',4,'p_reference_more','zad2_parser.py',156),
  ('variable -> ID','variable',1,'p_variable','zad2_parser.py',160),
  ('expression -> STRING','expression',1,'p_expression_string','zad2_parser.py',165),
  ('expression -> ( expression )','expression',3,'p_expression_paren','zad2_parser.py',169),
  ('expression -> vector','expression',1,'p_expression_vector','zad2_parser.py',173),
  ('expression -> matrix','expression',1,'p_expression_matrix','zad2_parser.py',177),
  ('matrix -> ONES ( expression )','matrix',4,'p_matrix_ones','zad2_parser.py',181),
  ('matrix -> ONES ( expression , expression )','matrix',6,'p_matrix_ones','zad2_parser.py',182),
  ('matrix -> ZEROS ( expression )','matrix',4,'p_matrix_zeros','zad2_parser.py',189),
  ('matrix -> ZEROS ( expression , expression )','matrix',6,'p_matrix_zeros','zad2_parser.py',190),
  ('matrix -> EYE ( expression )','matrix',4,'p_matrix_eye','zad2_parser.py',197),
  ('matrix -> EYE ( expression , expression )','matrix',6,'p_matrix_eye','zad2_parser.py',198),
  ('vector -> [ expression ]','vector',3,'p_vector_one','zad2_parser.py',205),
  ('vector -> [ multiple_expressions ]','vector',3,'p_vector_more','zad2_parser.py',209),
  ('multiple_expressions -> expression , expression','multiple_expressions',3,'p_multiple_expressions_two','zad2_parser.py',213),
  ('multiple_expressions -> multiple_expressions , expression','multiple_expressions',3,'p_multiple_expressions_more','zad2_parser.py',217),
]
